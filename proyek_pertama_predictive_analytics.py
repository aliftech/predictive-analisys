# -*- coding: utf-8 -*-
"""Proyek Pertama : Predictive Analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m3lKCA1SKjKIkf_DLhqZp5VjFgwU7mEx

Nama : Wahyu Krisna Aji

Dataset : Bank Loan Status Dataset

Source : Kaggle

Link : https://www.kaggle.com/datasets/zaurbegiev/my-dataset?select=credit_train.csv
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

"""# **COLLECTING DATA**"""

data = pd.read_csv('credit_train.csv')

"""# **DATA UNDESTANDING AND FILL THE MISSING VALUE**"""

data

data.shape

data = data.drop(['Loan ID', 'Customer ID', 'Years in current job'], axis=1)
data.head()

data.isna()

data = data.fillna(method ='bfill')
data

data.info()

data = data.drop('Months since last delinquent', axis=1)
data.info()

data = data.dropna()
data.shape

data.groupby('Purpose')['Purpose'].agg('count')

data.groupby('Home Ownership')['Home Ownership'].agg('count')

data.groupby('Term')['Term'].agg('count')

data.groupby('Loan Status')['Loan Status'].agg('count')

data = data.drop('Purpose', axis=1)

"""# **EXPLORATORY DATA ANALYSIS - DESCRIPTON**


"""

data.describe()

"""# **DEAL WITH OUTLIERS**

**Monthly Debt**

"""

sns.boxplot(x=data['Monthly Debt'])

"""**Number of Open Accounts**"""

sns.boxplot(x=data['Number of Open Accounts'])

"""**Annual Income**"""

sns.boxplot(x=data['Annual Income'])

"""**Years of Credit History**"""

sns.boxplot(x=data['Years of Credit History'])

Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR=Q3-Q1
data=data[~((data<(Q1-1.5*IQR))|(data>(Q3+1.5*IQR))).any(axis=1)]
 
# Check data size without an outliers
data.shape

"""# **UNIVARIATE ANALYSIS**

## CATEGORICAL DATA

**Loan Status**


"""

category = ['Loan Status', 'Term', 'Home Ownership']
fitur = category[0]
count = data[fitur].value_counts()
percent = 100*data[fitur].value_counts(normalize=True)
new_data = pd.DataFrame({'Sample Count':count, 'Percentage':percent.round(1)})
print(new_data)
count.plot(kind='bar', title=fitur);

"""**Term**"""

fitur = category[1]
count = data[fitur].value_counts()
percent = 100*data[fitur].value_counts(normalize=True)
new_data = pd.DataFrame({'Sample Count':count, 'Percentage':percent.round(1)})
print(new_data)
count.plot(kind='bar', title=fitur);

"""**Home Ownership**"""

fitur = category[2]
count = data[fitur].value_counts()
percent = 100*data[fitur].value_counts(normalize=True)
new_data = pd.DataFrame({'Sample Count':count, 'Percentage':percent.round(1)})
print(new_data)
count.plot(kind='bar', title=fitur);

"""# Numerical"""

data.hist(bins=50, figsize=(20,15))
plt.show()

"""# **MULTIVARIATE ANALYSIS**

# CATEGORICAL
"""

category_feature = data.select_dtypes(include='object').columns.to_list()
 
for col in category_feature:
  sns.catplot(x=col, y="Current Credit Balance", kind="bar", dodge=False, height = 4, aspect = 3,  data=data, palette="Set3")
  plt.title("Current Credit Balance is relative to - {}".format(col))

sns.pairplot(data, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = data.corr().round(2)
 
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Matrix Correlation for Numeric Feature ", size=20)

"""# **DATA PREPARATION**"""

from sklearn.preprocessing import  OneHotEncoder
data = pd.concat([data, pd.get_dummies(data['Loan Status'], prefix='Loan Status')],axis=1)
data = pd.concat([data, pd.get_dummies(data['Term'], prefix='Term')],axis=1)
data = pd.concat([data, pd.get_dummies(data['Home Ownership'], prefix='Home Ownership')],axis=1)
data.drop(['Loan Status', 'Term', 'Home Ownership'], axis=1, inplace=True)
data.head()

"""# **Train-Test-Split**"""

from sklearn.model_selection import train_test_split
 
X = data.drop(["Current Credit Balance"],axis =1)
Y = data["Current Credit Balance"]
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 123)

print(f'Total Sample Data in Dataset: {len(X)}')
print(f'Total Sample Data in Train Dataset: {len(X_train)}')
print(f'Total Sample Data in Test Dataset: {len(X_test)}')

"""# **STANDARIZATION**"""

from sklearn.preprocessing import StandardScaler

num_feat = ['Current Loan Amount', 'Credit Score', 'Annual Income', 'Monthly Debt',
            'Years of Credit History', 'Number of Open Accounts', 'Number of Credit Problems',
            'Bankruptcies', 'Tax Liens', 'Maximum Open Credit']
std_scaler = StandardScaler()
std_scaler.fit(X_train[num_feat])
X_train[num_feat] = std_scaler.transform(X_train.loc[:, num_feat])
X_train[num_feat].head()

X_train[num_feat].describe().round(4)

"""# **MODEL DEVELOPMENT**"""

model_df = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'ADABoosting'])

"""**KNN**"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
 
knn_model = KNeighborsRegressor(n_neighbors=10)
knn_model.fit(X_train, Y_train)
 
model_df.loc['train_mse','knn'] = mean_squared_error(y_pred = knn_model.predict(X_train), y_true=Y_train)

"""**RANDOM FOREST**"""

from sklearn.ensemble import RandomForestRegressor

random_forest = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
random_forest.fit(X_train, Y_train)
 
model_df.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=random_forest.predict(X_train), y_true=Y_train)

"""**ADA BOOSTING**"""

from sklearn.ensemble import AdaBoostRegressor

ADABoosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)                             
ADABoosting.fit(X_train, Y_train)
model_df.loc['train_mse','ADABoosting'] = mean_squared_error(y_pred=ADABoosting.predict(X_train), y_true=Y_train)

"""# **MODEL EVALUATION**"""

X_test.loc[:, num_feat] = std_scaler.transform(X_test[num_feat])

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
model_dictionaries = {'KNN': knn_model, 'RF': random_forest, 'Boosting': ADABoosting}

for name, model in model_dictionaries.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=Y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=Y_test, y_pred=model.predict(X_test))/1e3
 
mse

figure, axis = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=axis, zorder=3)
axis.grid(zorder=0)

prediction = X_test.iloc[:1].copy()
prediction_dictionaries = {'y_true':Y_test[:1]}
for name, model in model_dictionaries.items():
    prediction_dictionaries['prediction_'+name] = model.predict(prediction).round(1)
 
pd.DataFrame(prediction_dictionaries)